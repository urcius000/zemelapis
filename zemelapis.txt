<!DOCTYPE html>
<html lang="lt">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Lietuvos žemėlapis</title>
  <style>
    :root{ --grey:#bdbdbd; --stroke:#424242; --green:#1e8e3e; }
    body{margin:0;background:#111;font-family:sans-serif;color:#fff}
    .map{position:relative}
    .map svg{display:block;width:100%;height:auto;background:#222}
    .region{fill:var(--grey);stroke:var(--stroke);stroke-width:1;cursor:pointer;transition:fill .2s}
    .region.is-active{fill:var(--green)}
    .region:hover{filter:brightness(1.2)}
    .tooltip{position:absolute;transform:translate(-9999px,-9999px);
      background:#000;padding:6px 10px;border-radius:6px;font-size:13px;
      pointer-events:none;white-space:nowrap}
  </style>
</head>
<body>
  <div class="map" id="lt-map">
    <div id="svg-host" style="min-height:420px;display:flex;align-items:center;justify-content:center">Kraunamas žemėlapis…</div>
    <div class="tooltip" id="tooltip"></div>
  </div>

  <script>
    const SVG_URL = 'https://upload.wikimedia.org/wikipedia/commons/f/f1/Population_density_in_municipalities_of_Lithuania_%28blank%29.svg';

    // Pažymėtas Panevėžys
    const HIGHLIGHT_BY_NAME = ['Panevėžio m. sav.'];

    const OVERRIDES_BY_NAME = {
      'Panevėžio m. sav.': 'Panevėžys – pažymėta vietovė'
    };

    (async function(){
      const host = document.getElementById('svg-host');
      const tip  = document.getElementById('tooltip');

      let svgText;
      try {
        const res = await fetch(SVG_URL);
        svgText = await res.text();
      } catch(err){
        host.textContent = 'Nepavyko užkrauti SVG';
        return;
      }

      host.innerHTML = svgText;
      const svg = host.querySelector('svg');
      if(!svg){ host.textContent = 'SVG nerastas'; return; }

      const regions = Array.from(svg.querySelectorAll('path, polygon, polyline'));
      regions.forEach((el, idx)=>{
        const t = el.querySelector('title')?.textContent?.trim() || ('region-'+idx);
        el.classList.add('region');
        el.setAttribute('data-name', t);
        if(HIGHLIGHT_BY_NAME.includes(t)) el.classList.add('is-active');
      });

      function showTip(el, x, y){
        const name = el.getAttribute('data-name');
        tip.textContent = OVERRIDES_BY_NAME[name] || name;
        const bounds = host.getBoundingClientRect();
        tip.style.transform = `translate(${x-bounds.left+12}px,${y-bounds.top-10}px)`;
      }
      function hideTip(){ tip.style.transform = 'translate(-9999px,-9999px)'; }

      regions.forEach(el=>{
        el.addEventListener('mousemove', e=>showTip(el,e.clientX,e.clientY));
        el.addEventListener('mouseleave', hideTip);
      });
    })();
  </script>
</body>
</html>